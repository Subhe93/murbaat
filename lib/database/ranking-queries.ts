import prisma from "@/lib/prisma";
import { Prisma } from "@prisma/client";
import {
  RankingPageFilters,
  RankingPageWithRelations,
  SearchResult,
  CreateRankingPageData,
  UpdateRankingPageData,
} from "@/lib/types/database";

/**
 * الحصول على جميع صفحات التصنيف مع فلترة وترتيب
 */
export async function getRankingPages(
  filters: RankingPageFilters = {}
): Promise<SearchResult<RankingPageWithRelations>> {
  const {
    country,
    city,
    subArea,
    category,
    subCategory,
    isActive,
    isAutoGenerated,
    page = 1,
    limit = 20,
    sortBy = "newest",
    sortOrder = "desc",
  } = filters;

  const skip = (page - 1) * limit;

  // بناء شروط البحث
  const where: Prisma.RankingPageWhereInput = {
    ...(isActive !== undefined && { isActive }),
    ...(isAutoGenerated !== undefined && { isAutoGenerated }),
    ...(country && { country: { code: country } }),
    ...(city && { city: { slug: city } }),
    ...(subArea && { subArea: { slug: subArea } }),
    ...(category && { category: { slug: category } }),
    ...(subCategory && { subCategory: { slug: subCategory } }),
  };

  // بناء ترتيب النتائج
  const orderBy: Prisma.RankingPageOrderByWithRelationInput = (() => {
    switch (sortBy) {
      case "title":
        return { title: sortOrder };
      case "views":
        return { viewsCount: sortOrder };
      case "newest":
        return { createdAt: "desc" };
      case "oldest":
        return { createdAt: "asc" };
      default:
        return { createdAt: "desc" };
    }
  })();

  const [pages, total] = await Promise.all([
    prisma.rankingPage.findMany({
      where,
      include: {
        country: true,
        city: true,
        subArea: true,
        category: true,
        subCategory: true,
      },
      orderBy,
      skip,
      take: limit,
    }),
    prisma.rankingPage.count({ where }),
  ]);

  return {
    data: pages,
    pagination: {
      page,
      limit,
      total,
      totalPages: Math.ceil(total / limit),
    },
  };
}

/**
 * الحصول على صفحة تصنيف واحدة بواسطة slug
 */
export async function getRankingPageBySlug(
  slug: string
): Promise<RankingPageWithRelations | null> {
  return await prisma.rankingPage.findUnique({
    where: { slug },
    include: {
      country: true,
      city: true,
      subArea: true,
      category: true,
      subCategory: true,
    },
  });
}

/**
 * الحصول على صفحة تصنيف بواسطة ID
 */
export async function getRankingPageById(
  id: string
): Promise<RankingPageWithRelations | null> {
  return await prisma.rankingPage.findUnique({
    where: { id },
    include: {
      country: true,
      city: true,
      subArea: true,
      category: true,
      subCategory: true,
    },
  });
}

/**
 * إنشاء صفحة تصنيف جديدة
 */
export async function createRankingPage(data: CreateRankingPageData) {
  return await prisma.rankingPage.create({
    data: {
      slug: data.slug,
      title: data.title,
      description: data.description,
      content: data.content,
      metaTitle: data.metaTitle,
      metaDescription: data.metaDescription,
      metaKeywords: data.metaKeywords || [],
      countryId: data.countryId || null,
      cityId: data.cityId || null,
      subAreaId: data.subAreaId || null,
      categoryId: data.categoryId || null,
      subCategoryId: data.subCategoryId || null,
      limit: data.limit || 10,
      sortBy: data.sortBy || "rating",
      customCompanies: data.customCompanies || [],
      excludedCompanies: data.excludedCompanies || [],
      isActive: data.isActive !== undefined ? data.isActive : true,
      isAutoGenerated: data.isAutoGenerated || false,
      publishedAt: data.publishedAt || new Date(),
    },
    include: {
      country: true,
      city: true,
      subArea: true,
      category: true,
      subCategory: true,
    },
  });
}

/**
 * تحديث صفحة تصنيف
 */
export async function updateRankingPage(data: UpdateRankingPageData) {
  const { id, ...updateData } = data;

  // إعداد البيانات للتحديث
  const dataToUpdate: any = {};

  if (updateData.slug) dataToUpdate.slug = updateData.slug;
  if (updateData.title) dataToUpdate.title = updateData.title;
  if (updateData.description !== undefined) dataToUpdate.description = updateData.description;
  if (updateData.content !== undefined) dataToUpdate.content = updateData.content;
  if (updateData.metaTitle !== undefined) dataToUpdate.metaTitle = updateData.metaTitle;
  if (updateData.metaDescription !== undefined) dataToUpdate.metaDescription = updateData.metaDescription;
  if (updateData.metaKeywords !== undefined) dataToUpdate.metaKeywords = updateData.metaKeywords;
  
  // التعامل مع الحقول الاختيارية (nullable)
  if (updateData.countryId !== undefined) {
    dataToUpdate.countryId = updateData.countryId || null;
  }
  if (updateData.cityId !== undefined) {
    dataToUpdate.cityId = updateData.cityId || null;
  }
  if (updateData.subAreaId !== undefined) {
    dataToUpdate.subAreaId = updateData.subAreaId || null;
  }
  if (updateData.categoryId !== undefined) {
    dataToUpdate.categoryId = updateData.categoryId || null;
  }
  if (updateData.subCategoryId !== undefined) {
    dataToUpdate.subCategoryId = updateData.subCategoryId || null;
  }
  
  if (updateData.limit !== undefined) dataToUpdate.limit = updateData.limit;
  if (updateData.sortBy !== undefined) dataToUpdate.sortBy = updateData.sortBy;
  if (updateData.customCompanies !== undefined) dataToUpdate.customCompanies = updateData.customCompanies;
  if (updateData.excludedCompanies !== undefined) dataToUpdate.excludedCompanies = updateData.excludedCompanies;
  if (updateData.isActive !== undefined) dataToUpdate.isActive = updateData.isActive;
  if (updateData.publishedAt !== undefined) dataToUpdate.publishedAt = updateData.publishedAt;

  return await prisma.rankingPage.update({
    where: { id },
    data: dataToUpdate,
    include: {
      country: true,
      city: true,
      subArea: true,
      category: true,
      subCategory: true,
    },
  });
}

/**
 * حذف صفحة تصنيف
 */
export async function deleteRankingPage(id: string) {
  return await prisma.rankingPage.delete({
    where: { id },
  });
}

/**
 * حذف عدة صفحات تصنيف
 */
export async function deleteRankingPages(ids: string[]) {
  return await prisma.rankingPage.deleteMany({
    where: {
      id: { in: ids },
    },
  });
}

/**
 * تحديث عداد المشاهدات لصفحة تصنيف
 */
export async function incrementRankingPageViews(id: string) {
  return await prisma.rankingPage.update({
    where: { id },
    data: {
      viewsCount: { increment: 1 },
    },
  });
}

/**
 * تحديث عداد النقرات لصفحة تصنيف
 */
export async function incrementRankingPageClicks(id: string) {
  return await prisma.rankingPage.update({
    where: { id },
    data: {
      clicksCount: { increment: 1 },
    },
  });
}

/**
 * التحقق من وجود صفحة بنفس الـ slug
 */
export async function checkRankingPageSlugExists(
  slug: string,
  excludeId?: string
): Promise<boolean> {
  const count = await prisma.rankingPage.count({
    where: {
      slug,
      ...(excludeId && { id: { not: excludeId } }),
    },
  });

  return count > 0;
}

/**
 * الحصول على الشركات المطابقة لفلاتر صفحة التصنيف
 */
export async function getCompaniesForRankingPage(
  rankingPage: RankingPageWithRelations,
  additionalFilters?: {
    q?: string;
    country?: string;
    city?: string;
    subArea?: string;
    category?: string;
    subCategory?: string;
    rating?: number;
    verified?: boolean;
    sort?: string;
  }
) {
  const where: Prisma.CompanyWhereInput = {
    isActive: true,
  };

  // تطبيق فيلترات صفحة التصنيف الأساسية (إذا لم يتم تجاوزها بفيلترات إضافية)
  if (!additionalFilters?.country && rankingPage.countryId) {
    where.countryId = rankingPage.countryId;
  }
  if (!additionalFilters?.city && rankingPage.cityId) {
    where.cityId = rankingPage.cityId;
  }
  if (!additionalFilters?.subArea && rankingPage.subAreaId) {
    where.subAreaId = rankingPage.subAreaId;
  }
  if (!additionalFilters?.category && rankingPage.categoryId) {
    where.categoryId = rankingPage.categoryId;
  }
  if (!additionalFilters?.subCategory && rankingPage.subCategoryId) {
    where.subCategoryId = rankingPage.subCategoryId;
  }

  // تطبيق الفيلترات الإضافية
  if (additionalFilters) {
    // البحث النصي
    if (additionalFilters.q) {
      where.OR = [
        { name: { contains: additionalFilters.q, mode: "insensitive" } },
        { shortDescription: { contains: additionalFilters.q, mode: "insensitive" } },
        { description: { contains: additionalFilters.q, mode: "insensitive" } },
      ];
    }

    // فيلتر الدولة
    if (additionalFilters.country) {
      where.country = { code: additionalFilters.country };
    }

    // فيلتر المدينة
    if (additionalFilters.city) {
      where.city = { slug: additionalFilters.city };
    }

    // فيلتر المنطقة الفرعية
    if (additionalFilters.subArea) {
      where.subArea = { slug: additionalFilters.subArea };
    }

    // فيلتر الفئة
    if (additionalFilters.category) {
      where.category = { slug: additionalFilters.category };
    }

    // فيلتر الفئة الفرعية
    if (additionalFilters.subCategory) {
      where.subCategory = { slug: additionalFilters.subCategory };
    }

    // فيلتر التقييم
    if (additionalFilters.rating) {
      where.rating = { gte: additionalFilters.rating };
    }

    // فيلتر الموثقة فقط
    if (additionalFilters.verified) {
      where.isVerified = true;
    }
  }

  // إذا كانت هناك شركات مستبعدة
  if (rankingPage.excludedCompanies.length > 0) {
    where.id = { notIn: rankingPage.excludedCompanies };
  }

  // إذا كانت هناك شركات مخصصة، نستخدمها فقط (لا نطبق الفيلترات الإضافية)
  if (rankingPage.customCompanies.length > 0 && !additionalFilters) {
    return await prisma.company.findMany({
      where: {
        id: { in: rankingPage.customCompanies },
        isActive: true,
      },
      include: {
        country: true,
        city: true,
        subArea: true,
        category: true,
        subCategory: true,
        images: {
          where: { isActive: true },
          orderBy: { sortOrder: "asc" },
          take: 1,
        },
        _count: {
          select: {
            reviews: {
              where: { isApproved: true },
            },
          },
        },
      },
      take: rankingPage.limit,
    });
  }

  // ترتيب الشركات
  const sortBy = additionalFilters?.sort || rankingPage.sortBy;
  const orderBy: Prisma.CompanyOrderByWithRelationInput = (() => {
    switch (sortBy) {
      case "reviews":
        return { reviewsCount: "desc" };
      case "newest":
        return { createdAt: "desc" };
      case "name":
        return { name: "asc" };
      default:
        return { rating: "desc" };
    }
  })();

  // جلب الشركات بدون حد (limit) لدعم الفلترة الكاملة
  return await prisma.company.findMany({
    where,
    include: {
      country: true,
      city: true,
      subArea: true,
      category: true,
      subCategory: true,
      images: {
        where: { isActive: true },
        orderBy: { sortOrder: "asc" },
        take: 1,
      },
      _count: {
        select: {
          reviews: {
            where: { isApproved: true },
          },
        },
      },
    },
    orderBy,
    // لا نطبق الـ limit إذا كانت هناك فيلترات إضافية
    ...(additionalFilters ? {} : { take: rankingPage.limit }),
  });
}

/**
 * الحصول على عدد الشركات المطابقة لفلاتر معينة
 */
export async function countCompaniesByFilters(filters: {
  countryId?: string;
  cityId?: string;
  subAreaId?: string;
  categoryId?: string;
  subCategoryId?: string;
}): Promise<number> {
  return await prisma.company.count({
    where: {
      isActive: true,
      ...(filters.countryId && { countryId: filters.countryId }),
      ...(filters.cityId && { cityId: filters.cityId }),
      ...(filters.subAreaId && { subAreaId: filters.subAreaId }),
      ...(filters.categoryId && { categoryId: filters.categoryId }),
      ...(filters.subCategoryId && { subCategoryId: filters.subCategoryId }),
    },
  });
}

/**
 * الحصول على إحصائيات صفحات التصنيف
 */
export async function getRankingPagesStats() {
  const [total, active, autoGenerated, manual, totalViews, totalClicks] =
    await Promise.all([
      prisma.rankingPage.count(),
      prisma.rankingPage.count({ where: { isActive: true } }),
      prisma.rankingPage.count({
        where: { isActive: true, isAutoGenerated: true },
      }),
      prisma.rankingPage.count({
        where: { isActive: true, isAutoGenerated: false },
      }),
      prisma.rankingPage.aggregate({
        _sum: { viewsCount: true },
      }),
      prisma.rankingPage.aggregate({
        _sum: { clicksCount: true },
      }),
    ]);

  return {
    total,
    active,
    inactive: total - active,
    autoGenerated,
    manual,
    totalViews: totalViews._sum.viewsCount || 0,
    totalClicks: totalClicks._sum.clicksCount || 0,
  };
}

/**
 * الحصول على أفضل صفحات التصنيف (الأكثر مشاهدة)
 */
export async function getTopRankingPages(limit: number = 10) {
  return await prisma.rankingPage.findMany({
    where: { isActive: true },
    include: {
      country: true,
      city: true,
      category: true,
    },
    orderBy: { viewsCount: "desc" },
    take: limit,
  });
}


